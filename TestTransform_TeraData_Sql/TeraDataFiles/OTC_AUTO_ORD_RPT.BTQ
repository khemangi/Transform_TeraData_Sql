
/*************************************************************************************
SCRIPT NAME: FCT_OTC_AUTO_ORD_RPT.BTQ
DESCRIPTION: PROCESS FOR Automated Orders AT SEMANTIC LAYER

AUTHOR            	DATE
Srinivasa Rao Kintali   2017-05-30 (ORIGINAL)
COMMENTS : THIS JOB SHOULD RUN AFTER THE ETL
*************************************************************************************/

.RUN FILE=@TD_LOGON@;
SET QUERY_BAND='CAPABILITY=OTC;JOB_STREAM_NM=CNLV-SMOT-AUTORD;JOB_NM=CN_LV_SM_TD_OT_AUTO_ORD;BTEQ_NM=OTC_AUTO_ORD_RPT;'  FOR SESSION;
.SET WIDTH 255
.SET ERROROUT STDOUT
/* ------------------------------------------------------------------------------------ */
/* VOLATILE MAX AND MIN MONTH TABLE */
/* ------------------------------------------------------------------------------------ */

CREATE VOLATILE TABLE MX_MTH AS(
SELECT Min(RPTG_MO_DT) AS MIN_MTH,Max(RPTG_MO_DT) AS MAX_MTH 
FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ORD_PRCS_AUTO_AGG
WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
)
WITH DATA ON COMMIT PRESERVE ROWS
;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;
/* ------------------------------------------------------------------------------------ */
/* VOLATILE TABLE FOR LAST 13 MONTHS DATA */
/* ------------------------------------------------------------------------------------ */
CREATE VOLATILE TABLE RPT_MNTS AS(
	SELECT RPTG_MO_DT AS RPT_DT,DERIV_RPTG_YR_NUM, DERIV_RPTG_MO_NUM
	,Row_Number() Over (ORDER BY RPTG_MO_DT DESC ) AS RNK
	 FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ORD_PRCS_AUTO_AGG
	QUALIFY RNK <14
	WHERE ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
	GROUP BY 1,2,3
)
WITH DATA ON COMMIT PRESERVE ROWS
;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

BT;

DELETE FROM @BASE_VIEW_DB@.FCT_OTC_AUTO_ORD_RPT;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* -------------------------------------------------------------------------------------------------------------------------------------------- */
/* Insert all the rows to load Automation Orders data into sem table FCT_OTC_AUTO_ORD_RPT */
/* -------------------------------------------------------------------------------------------------------------------------------------------- */

INSERT INTO @BASE_VIEW_DB@.FCT_OTC_AUTO_ORD_RPT(
RGN_ID                        
,CLUS_ID                       
,MCO_ID                        
,MSO_ID                        
,CTRY_CD                                      
,RPT_DT                        
,MAX_RPT_DT
,FULL_AUTO_ORD        
,SEMI_AUTO_ORD         
,MAN_ORD         
,UNKWN_TYPE_OF_ORD    
,TOT_ORD              
,FULL_AUTO_ORD_PCT    
,SEMI_AUTO_ORD_PCT     
,MAN_ORD_PCT     
,UNKWN_ORD_PCT        
,MAT_FULL_AUTO_ORD_SUM 
,MAT_SEMI_AUTO_ORD_SUM 
,MAT_MAN_ORD_SUM 
,MAT_UNKWN_ORD_SUM    
,MAT_TOT_ORD_SUM      
,MAT_FULL_AUTO_ORD_AVG 
,MAT_SEMI_AUTO_ORD_AVG 
,MAT_MAN_ORD_AVG 
,MAT_UNKWN_ORD_AVG    
,MAT_TOT_ORD_AVG      
,MAT_FULL_AUTO_ORD_PCT 
,MAT_SEMI_AUTO_ORD_PCT 
,MAT_MAN_ORD_PCT 
,MAT_UNKWN_ORD_PCT    
,YTD_FULL_AUTO_ORD_PCT              
)
SELECT * FROM
(
SELECT 
RGN_ID
,CLUS_ID 
,MCO_ID 
,MSO_ID
,CTRY_CD
,A.RPTG_MO_DT
,MAX_MTH AS REP_MONTH
,COALESCE(FULL_AUTO_ORD_CNT,0) AS FULL_AUTO_ORD_CNT
,COALESCE(SEMI_AUTO_ORD_CNT,0) AS SEMI_AUTO_ORD_CNT
,COALESCE(FULL_MAN_ORD_CNT,0) AS FULL_MAN_ORD_CNT
,COALESCE(UNCTGY_ORD_CNT,0) AS UNCTGY_ORD_CNT
,(COALESCE(FULL_AUTO_ORD_CNT,0)+COALESCE(SEMI_AUTO_ORD_CNT,0)+COALESCE(FULL_MAN_ORD_CNT,0)+COALESCE(UNCTGY_ORD_CNT,0)) AS TOTAL_ORDER
,(100.00*COALESCE(FULL_AUTO_ORD_CNT,0)/NullIfZero(TOTAL_ORDER)) AS FULLY_AUTOMATED_PER
,(100.00*COALESCE(SEMI_AUTO_ORD_CNT,0)/NullIfZero(TOTAL_ORDER)) AS MANUAL_AUTOMATED_PER
,(100.00*COALESCE(FULL_MAN_ORD_CNT,0)/NullIfZero(TOTAL_ORDER)) AS MANUAL_ONLY_PER
,(100.00*COALESCE(UNCTGY_ORD_CNT,0)/NullIfZero(TOTAL_ORDER)) AS UNKWN_PER
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Sum(COALESCE(FULL_AUTO_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  FA_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Sum(COALESCE(SEMI_AUTO_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  MA_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Sum(COALESCE(FULL_MAN_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  MO_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Sum(COALESCE(UNCTGY_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  UNKWN_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Sum(TOTAL_ORDER) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  TOTAL_SUM
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Avg(COALESCE(FULL_AUTO_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  FA_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Avg(COALESCE(SEMI_AUTO_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  MA_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Avg(COALESCE(FULL_MAN_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  MO_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Avg(COALESCE(UNCTGY_ORD_CNT,0)) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  UNKWN_AVG
,CASE WHEN RPTG_MO_DT>MIN_MTH+305 THEN Avg(TOTAL_ORDER) Over (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD ORDER BY RPTG_MO_DT ROWS BETWEEN 11 Preceding AND CURRENT ROW) END AS  TOTAL_AVG
,(100.00*FA_SUM/NullIfZero(TOTAL_SUM)) AS FA_AVG_PER
,(100.00*MA_SUM/NullIfZero(TOTAL_SUM) )AS MA_AVG_PER
,(100.00*MO_SUM/NullIfZero(TOTAL_SUM)) AS MO_AVG_PER
,(100.00*UNKWN_SUM/NullIfZero(TOTAL_SUM)) AS UNKWN_AVG_PER
,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN 100.00*(SUM(COALESCE(FULL_AUTO_ORD_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) )/ NULLIFZERO(SUM(TOTAL_ORDER) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW)) END AS YTD_FULLY_AUTOMATED_PER

/*,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN SUM(COALESCE(FULL_AUTO_ORD_CNT,0)) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_FULL_AUTO_ORD_CNT
,CASE WHEN EXTRACT( YEAR FROM A.RPTG_MO_DT) = EXTRACT( YEAR FROM MX_MTH.MAX_MTH) THEN SUM(TOTAL_ORDER) OVER (PARTITION BY RGN_ID,CLUS_ID,MCO_ID,MSO_ID,CTRY_CD, EXTRACT(YEAR FROM RPTG_MO_DT) ORDER BY RPTG_MO_DT ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) END AS  YTD_TOTAL_ORDER*/
from
(
SELECT 
COALESCE(GEO.RGN_ID,'ALL') AS RGN_ID
,COALESCE(GEO.CLUS_ID,'ALL') AS CLUS_ID 
,COALESCE(GEO.MCO_ID,'ALL') AS MCO_ID 
,COALESCE(GEO.MSO_ID,'ALL') AS MSO_ID
,COALESCE(A.CTRY_CD,'ALL') AS CTRY_CD
,A.RPTG_MO_DT
,SUM(COALESCE(FULL_AUTO_ORD_CNT,0)) AS FULL_AUTO_ORD_CNT
,SUM(COALESCE(SEMI_AUTO_ORD_CNT,0)) AS SEMI_AUTO_ORD_CNT
,SUM(COALESCE(FULL_MAN_ORD_CNT,0)) AS FULL_MAN_ORD_CNT
,SUM(COALESCE(UNCTGY_ORD_CNT,0)) AS UNCTGY_ORD_CNT
FROM @WWP_BASE_VIEW_DB@.WWP_OTC_ORD_PRCS_AUTO_AGG A

INNER JOIN @WWP_BASE_VIEW_DB@.WWP_GEO_ANY_LVL GEO
ON A.CTRY_CD = GEO.CTRY_CD
AND GEO.GEO_TYPE_CD='CTRY'
AND GEO.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
AND A.ETL_JOB_END_DTTM='2999-12-31 00:00:00.000000'
AND RPTG_MO_DT >= (SELECT Add_Months(Min(RPT_DT),-12) FROM RPT_MNTS)

GROUP BY GROUPING SETS 
(
(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,GEO.MSO_ID,A.CTRY_CD,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,GEO.MSO_ID,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,GEO.MCO_ID,RPTG_MO_DT)
,(GEO.RGN_ID,GEO.CLUS_ID,RPTG_MO_DT)
,(GEO.RGN_ID,RPTG_MO_DT)
,(RPTG_MO_DT)
)
) A
CROSS JOIN MX_MTH

) A

WHERE RPTG_MO_DT IN (SELECT RPT_DT FROM RPT_MNTS)
;
.IF Errorcode <> 0 THEN .QUIT  Errorcode;

ET;

.IF Errorcode <> 0 THEN .QUIT  Errorcode;

/* ------------------------------------------------------------------------------------ */
/*  COLLECT STATS									*/
/*								                         */
/* ------------------------------------------------------------------------------------ */

CALL DBADMIN.COLLECT_STATS ('@BASE_VIEW_DB@','FCT_OTC_AUTO_ORD_RPT','','V','','','','',STMNTOUT);
 
.IF Errorcode <> 0 THEN .QUIT  Errorcode;

SELECT Current_Timestamp ;

SET QUERY_BAND=NONE FOR SESSION;
.QUIT 0


